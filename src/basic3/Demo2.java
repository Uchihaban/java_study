package basic3;
/*
 * 构造函数：
 * 作用：给对应的对象进行初始化；
 * 
 * 定义格式：
 *       修饰符 函数名（形参）{
 *       函数体...}
 *       
 * 构造函数需要注意的细节：1.构造函数是没有返回值类型的；
 *                  2.构造函数的函数名必须与类名一致；
 *                  3.构造函数并不是手动调用！！！而是在创建对应的对象时，jvm就会主动调用到对应的构造函数；
 *                  4.如果一个类没有显式的写上一个构造方法时，那么Java编译器会为该类添加一个无参的构造函数。（权限修饰符与类的权限修饰符一致，如public）
 *                  创建对象时，jvm会调用到对应的构造方法，如果没有构造方法，java编译器在编译的时候会加上。
 *                         （可以通过反编译来证明，jdk提供了一个开发工具javap.exe给我们进行反编译）
 *                          javap 反编译工具：
 *                                        Javap -c -l(行号) -private 类名
 *                  5.如果一个类有显式的写上一个构造方法时，那么Java编译器不会为该类添加一个无参的构造函数。
 *                  6.构造函数是可以在一个类中，以函数重载的形式存在多个的；
 *                  
 * 构造函数和普通函数的区别：
 * 1.返回值类型：构造函数没有返回值类型；普通函数即使没有返回值，返回值类型也要写上void；
 * 2.函数名：构造函数的函数名必须与类名一致；普通函数的函数名只要符合标识符命名规则；
 * 3.调用方式：构造函数是在创建对象的时候由jvm调用的；普通函数是由我们使用对象调用的，一个对象可以多次调用普通的函数； 
 * 4.作用：构造函数用于初始化一个对象；普通函数是用于描述一类事物的公共行为的；
 * 
 * 代码块：
 * 构造代码块；
 * 局部代码块；大括号位于方法之内，作用是缩短局部变量的生命周期，节省点内存；
 * 静态代码块；
 * 
 * 构造代码块
 * 格式：{代码；}
 * 作用：给对象进行统一的初始化；   （构造函数 给对应的对象进行初始化 ）
 * 
 * 注意事项：
 * 1.java编译器编译一个java源文件的时候，会把成员变量的声明语句提至一个类的前端；
 * 2.成员变量的初始化工作其实都在构造函数中执行的；（其他地方的代码都会移到构造函数中）
 * 3.一旦经过java编译器编译后，那么构造代码块的代码块就会被移动到构造函数中执行，在构造函数之前执行，构造函数中的代码是最后执行的。
 * 4.成员变量的显示初始化与构造代码块的代码是按照当前代码的顺序执行的；
 * 
 * 
 * 
 * this关键字代表了所属函数的调用者对象
 * 作用：1.如果存在同名成员变量与局部变量时，在方法内部默认是访问局部变量的数据（java采取的是就近原则的机制访问的）；可以通过this关键字指定访问成员变量的数据。
 *     2.在一个构造函数中调用另外一个构造函数初始化对象。（this（name）调用了本类的一个参数的调用方法或this（）调用了本类的一个无参数的调用方法。）
 *        注意事项：this关键字调用其他的构造函数时，this关键字必须要是第一个语句，
 *                this关键字在构造函数中不能出现相互调用的情况，是一个死循环。
 * 
 * 注意事项：1.存在同名的成员变量和局部变量时，在方法的内部访问的是局部变量（java采取的是"就近原则"的机制访问的。
 *        2.如果在一个方法中，访问了一个变量，该变量只存在成员变量的情况下，那么java编译器会在该变量的前面添加this。
 *
 *        
 *        
 *        一个函数的形式参数也是属于局部变量。
 */

class Member{
	int id;
	String name;
	int age;
	
	Member(int i,String n,int a){
		id =i ;
		name = n;
		age = a ;
	}
	public void work(){
		System.out.println(name+"好好工作");
		
	}
}
public class Demo2 {
	public static void main(String[] args){
		Member m = new Member(020,"阿刁",23);
		m.work();
	}

}
